# Space RP Game World Generator v3
# Starts by generating random systems with stellar map coordinates, if the system is habitable or not, if the system has a habitable planet with cities, a starbase, an asteroid base, or a base on an uninhabitable planet

Import-Module AWSPowershell

Add-Type -AssemblyName System.Drawing

# Reset the world generation. Deletes all systems created
$doGeneration = $false

# Get the home directory for the script
$getHomePath1 = $psISE.CurrentFile.FullPath -split "\\"
$getHomePath2 = $getHomePath1[0..($getHomePath1.Length -5)]
$homePath = ""
foreach ($t in $getHomePath2) {$homePath += "$t\"}
$homePath = $homePath.Substring(0,$homePath.Length-1)

# Set the locations of required software and filepaths for the script to operate
$ScriptPath = "$homePath\game-world-generator\powershell-version\generate-game-world"
$SoftwarePath = "$homePath\StarmapCreation\Software"
$htmlFiles = "$SoftwarePath\StarGen\html"
$stargenPath = "$SoftwarePath\StarGen\StarGen.exe"
$planetgenPath = "$SoftwarePath\Planets\planet.exe"
$systemsPath = "$homePath\StarmapCreation\StarSystems"
$sectorsSave = "$homePath\starmapCreation\Sectors"

[int]$systemCount = 1000 # star systems per map (sector) # Standard 5000
#$sectors =  25 # total number of maps (sectors) to make # Standard 25
[int]$asteroidFieldChance = 12 # chance any star system will have an asteroid field
# colour values for the biomes where we can put settlements created on the planet maps generated by planet.exe
$okBiomes = "210210210","250215165","105155120","220195175","225155100","155215170","170195200","185150160","130190025","110160170"# Tundra, Grasslands, Taiga, Desert, Savanna, Temperate Forest, Temperate Rainforest, Xeric Shrubland and Dry Forest, Tropical Dry Forest, Tropical Rainforest

# Clears all the world data created
if ($doGeneration) {
    Remove-Item -Path "$sectorsSave\*" -Recurse -Force
}

# Attempts to represent reasonably accurate real world chances of star type
function Get-StarType {
    $rnd = Get-Random -Minimum 1 -Maximum 1000000
    switch ($rnd) {
        {$_ -ge 1 -and $_ -le 3} {"Blue",16000000,30000000}
        {$_ -ge 4 -and $_ -le 1400} {"LightSkyBlue",2100000,15999999}
        {$_ -ge 1401 -and $_ -le 7700} {"White",1400000,2099999}
        {$_ -ge 7701 -and $_ -le 29000} {"LightYellow",1040000,1399999}
        {$_ -ge 29001 -and $_ -le 106000} {"Yellow",800000,1039999}
        {$_ -ge 106001 -and $_ -le 235500} {"Orange",450000,799999}
        {$_ -ge 235501 -and $_ -le 1000000} {"Red",80000,449999}
    }
}

function Get-StarLocation {
    do {
        $1 = Get-Random -Minimum 5 -Maximum 4995
        $2 = Get-Random -Minimum 5 -Maximum 4995
        $coords = "$1,$2"
    } until ($systemsCoordArray -notcontains $coords)
    $systemsCoordArray += "$1,$2"
    return $coords
}

# Builds asteroid fields based on reasonably real world chances
function Get-AsteroidField {
    param($SystemName,$PlanetOrbits)
    $asteroidCount = Get-Random -Minimum 51 -Maximum 315
    Write-Host "Generating $asteroidCount asteroids" -BackgroundColor Gray
    $asteroidFieldRaw = (& "$homePath\game-world-generator\powershell-version\generator-random-asteroids.ps1" "$systemName" "$asteroidCount")
    $asteroidField = $asteroidFieldRaw | ConvertTo-Json
    $asteroidFieldLoc = $(Get-Random $($planetOrbits.Count))
    $asteroidFieldLocText = "Asteroid belt between the orbit of planets $asteroidFieldLoc and $($asteroidFieldLoc+1)`n"
    return $asteroidFieldLocText,$asteroidField
}

function Create-NonPlanetarySystem {}

function Create-PlanetaryNonTerrestrialSystem {}

function Create-TerrestrialSystem {}

# Generate star system base values
$systemsCoordArray = @()
$systemsArray = New-Object System.Collections.Generic.List[psobject]

if ($doGeneration) {
    foreach ($system in 1..$systemCount) {
    
        $starType = Get-StarType
        do {
            $systemCoords = Get-StarLocation
            if ($systemsCoordArray -contains $systemCoords) {
                Write-Host "Duplicate coordinates found, retrying" -BackgroundColor Red
            }
        } until ($systemsCoordArray -notcontains $systemCoords)
        $systemsCoordArray += "$systemCoords"
        [string]$systemNum = $($systemCoords) -replace ","
        $starMass = Get-Random -Minimum $starType[1] -Maximum $starType[2]
        $systemName = "System_$systemNum"
        $starSystemObj = [PSCustomObject]@{
            "SystemName" = $systemName
            "SystemNumber" = $systemNum
            "XCoord" = (($systemCoords) -split ",")[0]
            "YCoord" = (($systemCoords) -split ",")[1]
            "StarColour" = $starType[0]
            "StarMass" = $starMass
        }
        $systemsArray.Add($starSystemObj)
    }
    Export-Csv -Path $systemsPath -InputObject $systemsArray
}

# Define the main starmap properties
# Define the size of the map file
[int]$masterMapSizeX = 5002 # map file pixel width
[int]$masterMapSizeY = 5002 # map file pixel height
[int]$buffer = 5 # pixel buffer around the edges of the map image
[int]$labelWidth = 44 # pixel width of the text labels
$gridDividerPixels = 100
$starmapBmp = new-object System.Drawing.Bitmap $masterMapSizeX,$masterMapSizeY
$brushBg = [System.Drawing.Brushes]::Black
$fontMapNum = new-object System.Drawing.Font "Lucida Sans",12
$fontStarNum = new-object System.Drawing.Font "Lucida Sans",6
$graphics = [System.Drawing.Graphics]::FromImage($starmapBmp)
$graphics.FillRectangle($brushBg,0,0,$starmapBmp.Width,$starmapBmp.Height)
$brushTitle = [System.Drawing.Brushes]::White
$starmapFileName = "Messier13Starmap.jpg"

$gridDividers = [math]::Floor($masterMapSizeX/$gridDividerPixels)
$gridPen = New-Object System.Drawing.Pen DarkSlateGray
$graphics.DrawLine($gridPen,0,0,0,5000)
$graphics.DrawLine($gridPen,0,0,5000,1)

foreach ($gridLine in 2..$gridDividers) {
    if ($gridLine -eq 2) {
        $linePosIterationX = 1+$gridDividerPixels
        $graphics.DrawLine($gridPen,$linePosIterationX,1,$linePosIterationX,5000)
    }
    $linePosIterationX = $linePosIterationX+$gridDividerPixels
    $graphics.DrawLine($gridPen,$linePosIterationX,1,$linePosIterationX,5000)
    foreach ($girdline in 2..$gridDividers) {
        if ($gridLine -eq 2) {
            $linePosIterationY = 1+$gridDividerPixels
            $graphics.DrawLine($gridPen,1,$linePosIterationY,5000,$linePosIterationY)
        }
        $linePosIterationY = $linePosIterationY+$gridDividerPixels
        $graphics.DrawLine($gridPen,1,$linePosIterationY,5000,$linePosIterationY)
    }
}

$graphics.DrawString("Sector: Messier 13 ",$fontMapNum,$brushTitle,10,10)
$graphics.DrawString("Scale: 1 square = 2 ly",$fontMapNum,$brushTitle,10,28)

# Fill the starmap with star system locations
foreach ($system in $systemsArray) {
    $brushFg = [System.Drawing.Brushes]::($system.StarColour)
    $starColour = [System.Drawing.Color]::($system.StarColour)
    [int]$xPos = $system.XCoord
    [int]$yPos = $system.YCoord
    $starmapBmp.SetPixel($xPos,$yPos,$starColour)
    if (($xPos+$labelWidth) -ge $masterMapSizeX) {
        $xTextPos = ($xPos-($labelWidth))
        $yTextPos = $yPos
    } else {
        $xTextPos = $xPos
    }
    if (($yTextPos+10) -ge $masterMapSizeY) {
        $yTextPos = ($yPos-$buffer)
    } else {
        $yTextPos = $yPos
    }
    if (($yPos) -le 10) {
        $yTextPos = ($yPos+$buffer)
    } else {
        $yTextPos = $yPos
    }
    [string]$graphicsText = "$($system.SystemNumber)"
    [int]$xTextPos = $xTextPos+1
    [int]$yTextPos = $yTextPos-6
    $graphics.DrawString($graphicsText,$fontStarNum,$brushFg,$xTextPos,$yTextPos)
}

Remove-Item "$systemsPath\$starmapFileName"

$graphics.Dispose()
$starmapBmp.Save("$systemsPath\$starmapFileName")

Start-Process "$systemsPath\$starmapFileName"

$sourceRec= [System.Drawing.Rectangle]::New(0,0,1000,1000)
$sectorMapCopy = $starmapBmp.Clone($sourceRec, $starmapBmp.PixelFormat)
$sectorMap = [System.Drawing.Bitmap]::new(1000,1000)
$pasteArea = [System.Drawing.Rectangle]::New(1,1,1000,1000)
$sectorMap















<# All the S3 and Kanka API stuff all working
if ((Get-S3Object -BucketName "rpg-objects" -Region us-east-1 -ProfileName MathewWeissProfile).key -notmatch $starmapFileName) {
    Write-S3Object -BucketName "rpg-objects" -File "$systemsPath\$starmapFileName" -PublicReadOnly -Region us-east-1 -ProfileName rpg-stuff-profile
}

$accessToken = Get-Content G:\KankaPAN.txt

$header = @{
    Authorization="Bearer $accessToken"
}

$mapName = "Messier 13 Galactic Cluster Starmap"

$body = @{
    name=$mapName
    image_url="https://rpg-objects.s3.amazonaws.com/Messier13Starmap.jpg"
}

if ((Invoke-RestMethod -Uri "https://kanka.io/api/1.0/campaigns/111078/maps" -Headers $header -Method Get).Data.Name -notmatch $mapName) {
    Invoke-RestMethod -Uri "https://kanka.io/api/1.0/campaigns/111078/maps" -Headers $header -Method Post -Body $body
}


#>

$parameters = @{
    DBInstanceIdentifier = 'starsystems'
    Engine = 'mysql'
    DBInstanceClass = 'db.t3.micro'
    MasterUsername = 'admin'
    MasterUserPassword = 'AVWhwjmDb1cn3TJHatax' ## Do not to include a forward slash, @ symbol, double quotes or spaces
    AllocatedStorage = 20 ## Gigabytes
    PubliclyAccessible = $true ## to connect over the Internet
}
$instance = New-RDSDBInstance @parameters -ProfileName rpg-stuff-profile